{
  "expand": "schema,names",
  "startAt": 0,
  "maxResults": 429,
  "total": 429,
  "issues": [
    {
      "id": "1",
      "key": "REQ-D-Agent-001",
      "fields": {
        "summary": "Design decisions",
        "issuetype": {
          "id": "1",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "An Ankaios agent creates a workload file on the host file system at a file path consisting of a base path joined by the relative mount point of the file.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "2",
      "key": "REQ-D-Agent-002",
      "fields": {
        "summary": "Design decisions",
        "issuetype": {
          "id": "2",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios agent shall accept configuration files read at startup that specify the general startup configuration of the agent with a lower precedence than environment variables and command line arguments.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "3",
      "key": "REQ-D-Agent-003",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "3",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios agent shall accept configuration files read at startup that specify the general startup configuration of the agent with a lower precedence than environment variables and command line arguments.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "4",
      "key": "REQ-D-Agent-004",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "4",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios agent shall prepare a dedicated run directory during startup by creating a folder with the following name:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "5",
      "key": "REQ-D-Agent-005",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "5",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios agent shall enforce agent names which respect the naming convention defined in the common library.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "6",
      "key": "REQ-D-Agent-006",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "6",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios Agent shall use the given interfaces and channels to communicate with the Server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "7",
      "key": "REQ-D-Agent-007",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "7",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Agent is connected to the Server, the Agent shall send an `AgentHello` message to the Server containing the agent's name.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "8",
      "key": "REQ-D-Agent-008",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "8",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The AgentManager shall listen for request from the Server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "9",
      "key": "REQ-D-Agent-009",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "9",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the AgentManager receives workload states of workloads it manages, it shall execute hysteresis on the workload state as defined by the transitions between workload states.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "10",
      "key": "REQ-D-Agent-010",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "10",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "All communication with the Server shall go through the Communication Middleware.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "11",
      "key": "REQ-D-Agent-011",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "11",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios Agent shall use per default a gRPC Communication Middleware.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "12",
      "key": "REQ-D-Agent-012",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "12",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios agent shall support the following cli arguments all of which contain a file path to a PEM file, alternatively configurable over environment variables which have lower priority compared to explicitly provided cli arguments:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "13",
      "key": "REQ-D-Agent-013",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "13",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios agent shall support the cli argument `--insecure` (short alias `-k`), alternatively configurable via the environment variable `ANKAGENT_INSECURE` which has lower priority compared to explicitly provided cli arguments.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "14",
      "key": "REQ-D-Agent-014",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "14",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user starts the Ankaios agent with enabled insecure communication and the Ankaios agent initializes the communication middleware, then the Ankaios agent shall instruct the communication middleware to use an insecure communication channel.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "15",
      "key": "REQ-D-Agent-015",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "15",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the file paths of the root certificate, the agent certificate and the agent key is provided upon startup, then the Ankaios agent shall provide each of these file paths to the communication middleware.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "16",
      "key": "REQ-D-Agent-016",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "16",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "If the user starts the Ankaios agent without specifying the cli arguments for the mTLS PEM file paths or the insecure cli argument, then the Ankaios agent shall: * exit with a non zero exit code",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "17",
      "key": "REQ-D-Agent-017",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "17",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios Agent shall use asynchronous communication channels from the Common library.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "18",
      "key": "REQ-D-Agent-018",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "18",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios agent shall support multiple runtime connectors.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "19",
      "key": "REQ-D-Agent-019",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "19",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios agent shall manage workloads using the runtime connector specified in the workload specification.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20",
      "key": "REQ-D-Agent-020",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "20",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Agent shall support Podman for creating containers as a build-in runtime connector named \"podman\".",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "21",
      "key": "REQ-D-Agent-021",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "21",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Agent shall support Podman for creating Kubernetes resources as a build-in runtime connector named \"podman-kube\".",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "22",
      "key": "REQ-D-Agent-022",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "22",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The agent shall support containerd for creating containers as a build-in runtime connector named \"containerd\".",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "23",
      "key": "REQ-D-Agent-023",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "23",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the AgentManager receives an `UpdateWorkload` message from the server, then the RuntimeManager shall handle the workloads contained within the message.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "24",
      "key": "REQ-D-Agent-024",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "24",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the RuntimeManager receives the workloads of an `UpdateWorkload` message, then the RuntimeManager shall transform the workloads inside the message into a list of `WorkloadOperation`s containing workloads to create, update and delete.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "25",
      "key": "REQ-D-Agent-025",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "25",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the RuntimeManager receives a create `WorkloadOperation` with fulfilled inter-workload dependencies, then the RuntimeManager shall request the RuntimeFacade to create the workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "26",
      "key": "REQ-D-Agent-026",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "26",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the RuntimeManager receives an update `WorkloadOperation` with fulfilled inter-workload dependencies, then the RuntimeManager shall request the WorkloadObject to update the workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "27",
      "key": "REQ-D-Agent-027",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "27",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the RuntimeManager receives an delete `WorkloadOperation` with fulfilled inter-workload dependencies, then the RuntimeManager shall request the WorkloadObject to delete the workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "28",
      "key": "REQ-D-Agent-028",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "28",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the RuntimeManager receives an update delete only `WorkloadOperation`, then the RuntimeManager shall request the WorkloadObject to update the workload with only deleting the existing workload by passing no workload to the WorkloadObject.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "29",
      "key": "REQ-D-Agent-029",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "29",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When a new ControlInterface instance for an workload is created, the ControlInterface shall: * trigger the creation of the control interface FIFO files",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30",
      "key": "REQ-D-Agent-030",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "30",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Each new ControlInterface instance shall create two FIFO files:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "31",
      "key": "REQ-D-Agent-031",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "31",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Control Interface Instance shall create the Control Interface pipes at the following path:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "32",
      "key": "REQ-D-Agent-032",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "32",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the workload has control interface access rules configured, the Control Interface shall be created for that workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "33",
      "key": "REQ-D-Agent-033",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "33",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Agent gets an add Workload command with the `UpdateWorkload` message and the runtime of the Workload is unknown, the RuntimeManager shall: * skip this workload",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "34",
      "key": "REQ-D-Agent-034",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "34",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the RuntimeManager creates new workload objects via the RuntimeFacade, the RuntimeManager shall store the Workload in a list of running workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "35",
      "key": "REQ-D-Agent-035",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "35",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "After receiving the complete list of added workloads from the Ankaios server at the initial connection establishment, the RuntimeManager shall handle existing workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "36",
      "key": "REQ-D-Agent-036",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "36",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When handling existing workloads, the RuntimeManager shall call each RuntimeFacade to request a list of existing workloads started during the same machine runtime window by a previous execution of an Ankaios Agent with the same name as the current...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "37",
      "key": "REQ-D-Agent-037",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "37",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When receiving a call to list all reusable workloads, the RuntimeFacade shall forward the call to the wrapped runtime and return the list to the caller.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "38",
      "key": "REQ-D-Agent-038",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "38",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When handling existing workloads, the RuntimeManager shall only request the corresponding RuntimeFacade to start workloads that are not found on the system.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "39",
      "key": "REQ-D-Agent-039",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "39",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the RuntimeFacade gets a request to create a workload, the RuntimeFacade shall: * start the WorkloadControlLoop waiting for WorkloadCommands",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40",
      "key": "REQ-D-Agent-040",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "40",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When handling existing workloads, for each found existing workload which is requested to be started and has unchanged configuration and the workload is running, the RuntimeManager shall request the corresponding RuntimeFacade to resume the workloa...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "41",
      "key": "REQ-D-Agent-041",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "41",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When requested, the RuntimeFacade resumes a workload by: * start the WorkloadControlLoop waiting for WorkloadCommands",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "42",
      "key": "REQ-D-Agent-042",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "42",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the agent handles existing workloads, for each found existing workload which is requested to be started and either the workload's configuration has changed or the workload is not in state running or succeeded, the RuntimeManager shall do the ...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "43",
      "key": "REQ-D-Agent-043",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "43",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the agent handles existing workloads, for each found existing workload which is requested to be started and the workload's configuration has not changed and the workload is in state succeeded, the RuntimeManager shall request the RuntimeFacad...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "44",
      "key": "REQ-D-Agent-044",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "44",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When handling existing workloads, for each found existing workload that is not in the provided list of initial workloads, the RuntimeManager shall delete the workload without considering its `DeleteConditions`s by * requesting the workload to dele...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "45",
      "key": "REQ-D-Agent-045",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "45",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the RuntimeFacade is requested to delete the workload, then the RuntimeFacade shall delete a workload by: * sending a `Stopping(RequestedAtRuntime)` workload state for that workload",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "46",
      "key": "REQ-D-Agent-046",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "46",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop receives a resume command, then the WorkloadControlLoop shall: * request the workload Id from the corresponding runtime connector",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "47",
      "key": "REQ-D-Agent-047",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "47",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The RuntimeManager shall first handle the list of deleted Workloads before handling the list of added Workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "48",
      "key": "REQ-D-Agent-048",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "48",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The RuntimeManager shall request an update of a workload if the workload is in both the list of deleted and added workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "49",
      "key": "REQ-D-Agent-049",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "49",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadObject receives a trigger to update the workload, it: * triggers a comparison of the existing and new control interface metadata",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "50",
      "key": "REQ-D-Agent-050",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "50",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadObject is triggered to compare its existing control interface metadata with the updated metadata, the Workload shall compare the control interface's:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "51",
      "key": "REQ-D-Agent-051",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "51",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop receives a create command, the WorkloadControlLoop shall: * send a `Pending(Starting)` with additional information \"Triggered at runtime.\" workload state for that workload",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "52",
      "key": "REQ-D-Agent-052",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "52",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop created a workload successfully via the corresponding runtime connector, the WorkloadControlLoop shall store the following for the created workload: * the new Id",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "53",
      "key": "REQ-D-Agent-053",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "53",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop requested the runtime connector to create the workload and the creation failed, the WorkloadControlLoop shall: * delete the workload files subfolder on the host file system for that workload",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "54",
      "key": "REQ-D-Agent-054",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "54",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop requests the WorkloadFilesCreator to create the workload files for a workload and the creation of the files fails, the WorkloadControlLoop shall: * delete all the workload files on the host filesystem",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "55",
      "key": "REQ-D-Agent-055",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "55",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop started during the creation of the workload object receives an update command, the WorkloadControlLoop shall: * execute a delete command for the old configuration of the workload",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "56",
      "key": "REQ-D-Agent-056",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "56",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop started during the creation of the workload object receives an update command and the update command contains no new workload,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "57",
      "key": "REQ-D-Agent-057",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "57",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop has no old workload to delete during the update of a workload, the WorkloadControlLoop shall continue with the update.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "58",
      "key": "REQ-D-Agent-058",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "58",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop encounters a failure while deleting the old workload during the update of a workload, the WorkloadControlLoop shall continue allowing subsequent WorkloadCommands attempt.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "59",
      "key": "REQ-D-Agent-059",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "59",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop encounters a failure while creating a new workload during the update of a workload, the WorkloadControlLoop shall continue allowing subsequent WorkloadCommands attempt.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "60",
      "key": "REQ-D-Agent-060",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "60",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Agent gets an `UpdateWorkload` message that indicates an update of a workload and the workload cannot be found, the RuntimeManager shall trigger adding of the workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "61",
      "key": "REQ-D-Agent-061",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "61",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios agent receives an `UpdateWorkload` message with a workload for deletion that is not also listed as added workload, the agent shall trigger a deletion of the workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "62",
      "key": "REQ-D-Agent-062",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "62",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadObject receives a trigger to delete the workload, it: * stops the control interface",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "63",
      "key": "REQ-D-Agent-063",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "63",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop started during the creation of the workload object receives a delete command, the WorkloadControlLoop shall: * send a `Stopping(RequestedAtRuntime)` workload state for that workload",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "64",
      "key": "REQ-D-Agent-064",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "64",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop has no old workload to delete during the deletion of a workload, the WorkloadControlLoop shall exit.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "65",
      "key": "REQ-D-Agent-065",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "65",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop encounters a failure while deleting the workload, the WorkloadControlLoop shall continue allowing subsequent workload command attempts.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "66",
      "key": "REQ-D-Agent-066",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "66",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Agent gets an `UpdateWorkload` message with an added workload that was already started by the RuntimeManager, the RuntimeManager shall trigger the update of the workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "67",
      "key": "REQ-D-Agent-067",
      "fields": {
        "summary": "Handling UpdateWorkload commands from the Ankaios Server",
        "issuetype": {
          "id": "67",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios agent gets an `UpdateWorkload` message with an added workload that was not started already and the runtime is known, the RuntimeManager shall request the corresponding RuntimeFacade to create the workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "68",
      "key": "REQ-D-Agent-068",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "68",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the RuntimeManager is triggered for new workload states, the RuntimeManager shall:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "69",
      "key": "REQ-D-Agent-069",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "69",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the RuntimeManager handles new `WorkloadOperation`s, then the RuntimeManager shall:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "70",
      "key": "REQ-D-Agent-070",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "70",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the AgentManager receives an `UpdateWorkloadState` message from the server, then the AgentManager shall trigger the RuntimeManager.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "71",
      "key": "REQ-D-Agent-071",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "71",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadScheduler handles an create `WorkloadOperation`, and the workload has at least one inter-workload dependency",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "72",
      "key": "REQ-D-Agent-072",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "72",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadScheduler receives a new delete `WorkloadOperation`, and the workload is an inter-workload dependency of at least one other workload",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "73",
      "key": "REQ-D-Agent-073",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "73",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadScheduler handles an update `WorkloadOperation`, and the workload inside the operation is an inter-workload dependency of at least one other workload",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "74",
      "key": "REQ-D-Agent-074",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "74",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadScheduler handles an update `WorkloadOperation`, and the workload inside the operation is an inter-workload dependency of at least one other workload",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "75",
      "key": "REQ-D-Agent-075",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "75",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the agent receives an `UpdateWorkloadState` or an `UpdateWorkload` message, and there are workload entries with unfulfilled inter-workload dependency conditions inside the waiting queue,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "76",
      "key": "REQ-D-Agent-076",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "76",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The WorkloadScheduler shall not put the update delete only `WorkloadOperation` into a waiting queue.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "77",
      "key": "REQ-D-Agent-077",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "77",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadScheduler checks if a workload fulfills all its configured `AddCondition`s, then the DependencyStateValidator shall execute the checks and provide the outcome.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "78",
      "key": "REQ-D-Agent-078",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "78",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadScheduler checks if a workload fulfills all its configured `DeleteCondition`s, then the DependencyStateValidator shall execute the checks and provide the outcome.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "79",
      "key": "REQ-D-Agent-079",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "79",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The `ExecutionState` of an inter-workload dependency shall fulfill the `AddCondition` according to the following table:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "80",
      "key": "REQ-D-Agent-080",
      "fields": {
        "summary": "Inter-workload dependencies of workloads",
        "issuetype": {
          "id": "80",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The `ExecutionState` of a workload shall fulfill the `DeleteCondition` of an inter-workload dependency according to the following table:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "81",
      "key": "REQ-D-Agent-081",
      "fields": {
        "summary": "Restart policies of workloads",
        "issuetype": {
          "id": "81",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios agent shall support the following restart policies for a workload:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "82",
      "key": "REQ-D-Agent-082",
      "fields": {
        "summary": "Restart policies of workloads",
        "issuetype": {
          "id": "82",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop receives a new workload state for a workload it manages, then the WorkloadControlLoop shall check the `WorkloadInstanceName` of the workload state and the workload it manages for equality.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "83",
      "key": "REQ-D-Agent-083",
      "fields": {
        "summary": "Restart policies of workloads",
        "issuetype": {
          "id": "83",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop receives a new valid workload state, then the WorkloadControlLoop shall detect a restart of a workload by comparing the workload's RestartPolicy with the received ExecutionState of that workload according to the follow...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "84",
      "key": "REQ-D-Agent-084",
      "fields": {
        "summary": "Restart policies of workloads",
        "issuetype": {
          "id": "84",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop detects that a restart of the workload is required, then the WorkloadControlLoop shall execute the restart of the workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "85",
      "key": "REQ-D-Agent-085",
      "fields": {
        "summary": "Restart policies of workloads",
        "issuetype": {
          "id": "85",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop executes a workload restart, then the WorkloadControlLoop shall: - delete the existing workload via the corresponding runtime connector",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "86",
      "key": "REQ-D-Agent-086",
      "fields": {
        "summary": "Retry creation of workloads",
        "issuetype": {
          "id": "86",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop creates a workload and the operation fails, the WorkloadControlLoop shall retry the creation of a workload by sending the WorkloadCommand Retry to the WorkloadControlLoop of the workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "87",
      "key": "REQ-D-Agent-087",
      "fields": {
        "summary": "Retry creation of workloads",
        "issuetype": {
          "id": "87",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop sends a WorkloadCommand Retry, it shall hold back the command by an exponential backoff with jitter.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "88",
      "key": "REQ-D-Agent-088",
      "fields": {
        "summary": "Retry creation of workloads",
        "issuetype": {
          "id": "88",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop receives a retry command, the WorkloadControlLoop shall: * create a new workload via the corresponding runtime connector (which creates and starts a state checker)",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "89",
      "key": "REQ-D-Agent-089",
      "fields": {
        "summary": "Retry creation of workloads",
        "issuetype": {
          "id": "89",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop receives an update or delete from the WorkloadCommandSender, the WorkloadControlLoop shall stop executing retry attempts.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "90",
      "key": "REQ-D-Agent-090",
      "fields": {
        "summary": "Retry creation of workloads",
        "issuetype": {
          "id": "90",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop receives an update from the WorkloadCommandSender, the WorkloadControlLoop shall reset the backoff.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "91",
      "key": "REQ-D-Agent-091",
      "fields": {
        "summary": "Workload files",
        "issuetype": {
          "id": "91",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The WorkloadFilesCreator shall create all workload files of a workload at the following path:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "92",
      "key": "REQ-D-Agent-092",
      "fields": {
        "summary": "Workload files",
        "issuetype": {
          "id": "92",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadFilesCreator is triggered with the list of workload files assigned to a workload and the predefined workload files directory, for each workload file, the WorkloadFilesCreator shall:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "93",
      "key": "REQ-D-Agent-093",
      "fields": {
        "summary": "Workload files",
        "issuetype": {
          "id": "93",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadFilesCreator is requested to write a workload file with content type binary, the WorkloadFilesCreator shall decode the base64 content to a collection of bytes which is written to the file.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "94",
      "key": "REQ-D-Agent-094",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "94",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The runtime connector trait shall require the implementation of the following functions:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "95",
      "key": "REQ-D-Agent-095",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "95",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The podman runtime connector shall implement the runtime connector trait.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "96",
      "key": "REQ-D-Agent-096",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "96",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The podman runtime connector shall use the Podman CLI.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "97",
      "key": "REQ-D-Agent-097",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "97",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called to return its unique name, the podman runtime connector shall return `podman`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "98",
      "key": "REQ-D-Agent-098",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "98",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called to return list of existing workloads, the podman runtime connector shall use the label `agent` stored in the workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "99",
      "key": "REQ-D-Agent-099",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "99",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called to create a workload and no existing workload id is provided, the podman runtime connector shall:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "100",
      "key": "REQ-D-Agent-100",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called to create a workload and an existing workload id is provided, the podman runtime connector shall:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "101",
      "key": "REQ-D-Agent-101",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "101",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called to create workload and the action is successfully processed by the Podman runtime connector, the podman runtime connector shall return workload id.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "102",
      "key": "REQ-D-Agent-102",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "102",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called to create workload and the creation fails, the podman runtime connector shall delete failed container.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "103",
      "key": "REQ-D-Agent-103",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "103",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called without an existing workload id to create a new workload, the podman runtime connector shall create following labels in the workload:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "104",
      "key": "REQ-D-Agent-104",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "104",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called without an existing workload id to create a new workload and the workload name is not set in the runtime configuration, the podman runtime connector shall set the workload execution name as the workload ...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "105",
      "key": "REQ-D-Agent-105",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "105",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called to create workload and the optional Control Interface pipes path is provided, the podman runtime connector shall mount the Control Interface pipes into the container in the file path `/run/ankaios/contro...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "106",
      "key": "REQ-D-Agent-106",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "106",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called to create a workload and the provided host workload file path to mount point mapping is not empty, the podman runtime connector shall mount the provided files into the container at the provided mount poi...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "107",
      "key": "REQ-D-Agent-107",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "107",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called to get workload id, the podman runtime connector shall use the label `name` stored in the workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "108",
      "key": "REQ-D-Agent-108",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "108",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman runtime connector is called to start the state checker, the podman runtime connector shall create the `PodmanStateGetter` and start it using `GenericPollingStateChecker`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "109",
      "key": "REQ-D-Agent-109",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "109",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Podman runtime connector is called to delete a workload, the Podman runtime connector shall shall first stop the workload followed by deleting it.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "110",
      "key": "REQ-D-Agent-110",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "110",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The podman-kube runtime connector shall implement the runtime connector trait.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "111",
      "key": "REQ-D-Agent-111",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "111",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The podman-kube runtime connector shall use the Podman CLI.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "112",
      "key": "REQ-D-Agent-112",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "112",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector receives a workload with at least one workload file assigned, the podman-kube runtime connector shall reject the workload with an error.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "113",
      "key": "REQ-D-Agent-113",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "113",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector is called to return its unique name, the podman-kube runtime connector shall return `podman-kube`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "114",
      "key": "REQ-D-Agent-114",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "114",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector is called to create a workload, the podman-kube runtime connector shall apply the manifest file.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "115",
      "key": "REQ-D-Agent-115",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "115",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector is called to create workload and the action is successfully processed by the podman-kube runtime connector, the podman-kube runtime connector shall return a podman-kube workload id.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "116",
      "key": "REQ-D-Agent-116",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "116",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector is called to create workload, before applying the manifest, the podman-kube runtime connector shall store the runtime configuration in a volume:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "117",
      "key": "REQ-D-Agent-117",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "117",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector is called to create a workload and the manifest is successfully applied by the podman-kube runtime connector, the podman-kube runtime connector shall store the pods in a volume:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "118",
      "key": "REQ-D-Agent-118",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "118",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector is called to create a workload and the podman-kube runtime fails to create the config or pods volume, the podman-kube runtime continues with applying the manifest and returning the workload ID.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "119",
      "key": "REQ-D-Agent-119",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "119",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector is called to create workload, the podman-kube runtime connector shall create a `PodmanStateGetter` for this workload and start it using a `GenericPollingStateChecker`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "120",
      "key": "REQ-D-Agent-120",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "120",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector is called to return a list of existing workloads, the podman-kube runtime shall use the config volumes.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "121",
      "key": "REQ-D-Agent-121",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "121",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector is called to get a workload ID, the podman-kube runtime connector shall use the data stored in the config and pods volume.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "122",
      "key": "REQ-D-Agent-122",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "122",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector is called to delete a workload, the podman-kube runtime connector shall use the `podman kube down` command with the manifest stored in the workload ID.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "123",
      "key": "REQ-D-Agent-123",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "123",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman-kube runtime connector is called to delete a workload, and podman-kube runtime successfully called the `podman kube down` command, the podman-kube runtime connector shall remove the config and pod volume.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "124",
      "key": "REQ-D-Agent-124",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "124",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The containerd runtime connector shall implement the runtime connector trait.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "125",
      "key": "REQ-D-Agent-125",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "125",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The containerd runtime connector shall use the `nerdctl` CLI to operate with the containerd daemon.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "126",
      "key": "REQ-D-Agent-126",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "126",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called to return its unique name, the containerd runtime connector shall return `containerd`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "127",
      "key": "REQ-D-Agent-127",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "127",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called to return a list of existing workloads, the containerd runtime connector shall use the label `agent` stored in the workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "128",
      "key": "REQ-D-Agent-128",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "128",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called to create a workload and no existing workload ID is provided, the containerd runtime connector shall:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "129",
      "key": "REQ-D-Agent-129",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "129",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called to create a workload and an existing workload ID is provided, the containerd runtime connector shall:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "130",
      "key": "REQ-D-Agent-130",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "130",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called to create a workload and the action is successfully processed by the containerd runtime connector, the containerd runtime connector shall return the workload ID.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "131",
      "key": "REQ-D-Agent-131",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "131",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called to create a workload and the creation fails, the containerd runtime connector shall delete the failed container.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "132",
      "key": "REQ-D-Agent-132",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "132",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called without an existing workload ID to create a new workload, the containerd runtime connector shall create the container with the following labels:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "133",
      "key": "REQ-D-Agent-133",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "133",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called without an existing workload ID to create a new workload and the workload name is not set in the runtime configuration, the containerd runtime connector shall set the workload execution name as the w...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "134",
      "key": "REQ-D-Agent-134",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "134",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called to create a workload and the optional host Control Interface pipes path is provided, the containerd runtime connector shall mount the Control Interface pipes into the container in the file path `/run...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "135",
      "key": "REQ-D-Agent-135",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "135",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called to create a workload and the provided host workload file path to mount point mapping is not empty, the containerd runtime connector shall mount the provided files into the container at the provided m...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "136",
      "key": "REQ-D-Agent-136",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "136",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called to get the workload ID, the containerd runtime connector shall use the label `name` written in the container.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "137",
      "key": "REQ-D-Agent-137",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "137",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called to start the state checker, the containerd runtime connector shall: * create the `ContainerdStateGetter`",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "138",
      "key": "REQ-D-Agent-138",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "138",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd runtime connector is called to delete a workload, the containerd runtime connector shall first stop the workload followed by deleting it.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "139",
      "key": "REQ-D-Agent-139",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "139",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The NerdctlCli shall provide functionality to list container IDs by label.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "140",
      "key": "REQ-D-Agent-140",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "140",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The NerdctlCli shall provide functionality to list workload instance names (workload IDs) by label.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "141",
      "key": "REQ-D-Agent-141",
      "fields": {
        "summary": "Runtime connector workflows",
        "issuetype": {
          "id": "141",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The NerdctlCli shall provide functionality to remove a workload by id that: * stops the workload by its id using `nerdctl stop`",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "142",
      "key": "REQ-D-Agent-142",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "142",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The state checker interface returned by the runtime connectors shall: * accept a specific runtime state getter object",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "143",
      "key": "REQ-D-Agent-143",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "143",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The state getter interface shall allow getting the current state of a workload for a given Id.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "144",
      "key": "REQ-D-Agent-144",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "144",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "A `GenericPollingStateChecker` implementation is provided that polls the workload state every second via the provided runtime state getter.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "145",
      "key": "REQ-D-Agent-145",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "145",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "A `GenericPollingStateChecker` implementation is provided that polls the workload state every second via the provided runtime state getter.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "146",
      "key": "REQ-D-Agent-146",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "146",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Workload State of a Workload changes on a workload, the `GenericPollingStateChecker` shall send the workload state to the WorkloadControlLoop.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "147",
      "key": "REQ-D-Agent-147",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "147",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The PodmanCli container state cache shall store the state of all Podman containers.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "148",
      "key": "REQ-D-Agent-148",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "148",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the PodmanCli is called to get container states, the PodmanCli shall use the PodmanCli container state cache for returning the requested states.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "149",
      "key": "REQ-D-Agent-149",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "149",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the PodmanCli is called to get container states and the cache is empty or the content is older than a second,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "150",
      "key": "REQ-D-Agent-150",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "150",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The NerdctlCli container state cache shall store the state of all containerd containers.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "151",
      "key": "REQ-D-Agent-151",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "151",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the NerdctlCli is called to get container states, the NerdctlCli shall use the NerdctlCli container state cache for returning the requested states.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "152",
      "key": "REQ-D-Agent-152",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "152",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the NerdctlCli is called to get container states and the cache is empty or the content is older than a second, the NerdctlCli shall:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "153",
      "key": "REQ-D-Agent-153",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "153",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The podman runtime connector shall implement the runtime state getter trait.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "154",
      "key": "REQ-D-Agent-154",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "154",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The `PodmanStateGetter` shall map the workload state returned by the Podman into workload states according to the next table:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "155",
      "key": "REQ-D-Agent-155",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "155",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `PodmanStateGetter` is called to get the current state of a workload over the state getter interface the `PodmanStateGetter` shall use the `PodmanCli`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "156",
      "key": "REQ-D-Agent-156",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "156",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `PodmanStateGetter` is created for a new workload, the `PodmanStateGetter` shall reset the Podman container state cache.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "157",
      "key": "REQ-D-Agent-157",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "157",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `PodmanStateGetter` is called to get the current state of a workload over the state getter interface and the `PodmanStateGetter` gets no state for this workload,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "158",
      "key": "REQ-D-Agent-158",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "158",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `PodmanStateGetter` is called to get the current state over the state getter interface and the `PodmanStateGetter` is unable to read the container state, the unknown state shall be returned.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "159",
      "key": "REQ-D-Agent-159",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "159",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The podman-kube runtime connector shall implement the runtime state getter trait.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "160",
      "key": "REQ-D-Agent-160",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "160",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `PodmanKubeStateGetter` is called to get the current state of a workload, the `PodmanKubeStateGetter` requests PodmanCli for the state of all containers of the pods listed in the workload ID.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "161",
      "key": "REQ-D-Agent-161",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "161",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `PodmanKubeStateGetter` is created for a new workload, the `PodmanKubeStateGetter` shall reset the Podman container state cache.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "162",
      "key": "REQ-D-Agent-162",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "162",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `PodmanKubeStateGetter` is called to get the current state of a workload and Podman returns no container for the pods of this workload, the `PodmanKubeStateGetter` shall return the state `removed`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "163",
      "key": "REQ-D-Agent-163",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "163",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The `PodmanKubeStateGetter` shall map pod state returned by Podman into workload states according to the next table:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "164",
      "key": "REQ-D-Agent-164",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "164",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `PodmanKubeStateGetter` is called to get the current state of a workload, the `PodmanKubeStateGetter` shall return the workload state with the lowest priority of all containers of this workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "165",
      "key": "REQ-D-Agent-165",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "165",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `PodmanKubeStateGetter` is called to get the current state of a workload and a pod of this workload is missing, the `PodmanKubeStateGetter` shall treat this pod, as if it contains one container with the state `unknown`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "166",
      "key": "REQ-D-Agent-166",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "166",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The containerd runtime connector shall implement the runtime state getter trait.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "167",
      "key": "REQ-D-Agent-167",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "167",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The `ContainerdStateGetter` shall map the workload state returned by the `nerdctl` CLI into workload states according to the next table:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "168",
      "key": "REQ-D-Agent-168",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "168",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `ContainerdStateGetter` is called to get the current state of a workload over the state getter interface, the `ContainerdStateGetter` shall use the `NerdctlCLI`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "169",
      "key": "REQ-D-Agent-169",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "169",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `ContainerdStateGetter` is created for a new workload, the `ContainerdStateGetter` shall reset the containerd container state cache.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "170",
      "key": "REQ-D-Agent-170",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "170",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `ContainerdStateGetter` is called to get the current state of a workload over the state getter interface and the `ContainerdStateGetter` gets no state for this workload, the `ContainerdStateGetter` shall return the state `lost`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "171",
      "key": "REQ-D-Agent-171",
      "fields": {
        "summary": "Getting workload states",
        "issuetype": {
          "id": "171",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the `ContainerdStateGetter` is called to get the current state over the state getter interface and the `ContainerdStateGetter` is unable to read the container state, the unknown state shall be returned.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "172",
      "key": "REQ-D-Agent-172",
      "fields": {
        "summary": "Handling UpdateWorkloadState",
        "issuetype": {
          "id": "172",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios Agent shall accept an `UpdateWorkloadState` message from the server and store the contained information.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "173",
      "key": "REQ-D-Agent-173",
      "fields": {
        "summary": "Handling UpdateWorkloadState",
        "issuetype": {
          "id": "173",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The WorkloadControlLoop shall receive the workload states of the workload it manages.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "174",
      "key": "REQ-D-Agent-174",
      "fields": {
        "summary": "Handling UpdateWorkloadState",
        "issuetype": {
          "id": "174",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The AgentManager shall receive the workload states of the workloads it manages.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "175",
      "key": "REQ-D-Agent-175",
      "fields": {
        "summary": "Handling UpdateWorkloadState",
        "issuetype": {
          "id": "175",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The AgentManager shall store the workload states of the workloads it manages into the WorkloadStateStore.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "176",
      "key": "REQ-D-Agent-176",
      "fields": {
        "summary": "Handling UpdateWorkloadState",
        "issuetype": {
          "id": "176",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop receives a new valid workload state for its workload it manages, then the WorkloadControlLoop shall send the workload state to the AgentManager.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "177",
      "key": "REQ-D-Agent-177",
      "fields": {
        "summary": "Handling UpdateWorkloadState",
        "issuetype": {
          "id": "177",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the AgentManager receives the workload states of the workload it manages, then the AgentManager shall send an `UpdateWorkloadState` message to the Ankaios server, containing the received workload state.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "178",
      "key": "REQ-D-Agent-178",
      "fields": {
        "summary": "Handling UpdateWorkloadState",
        "issuetype": {
          "id": "178",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "At an interval of 2 seconds, the AgentManager shall: * sample resource metrics for the agent's node via the ResourceMonitor",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "179",
      "key": "REQ-D-Agent-179",
      "fields": {
        "summary": "Handling UpdateWorkloadState",
        "issuetype": {
          "id": "179",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ResourceMonitor is requested to provide metrics about the resource availability, the ResourceMonitor shall provide the following measured resource metrics: * global CPU usage in percentage",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "180",
      "key": "REQ-D-Agent-180",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "180",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When sending or receiving message via the Control Interface pipes, Ankaios Agent uses length delimited protobuf encoding.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "181",
      "key": "REQ-D-Agent-181",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "181",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios Agents shall listen for Control Interface requests from the output pipe of each workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "182",
      "key": "REQ-D-Agent-182",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "182",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When an Ankaios agent receives an initial message on the Control Interface that is different to the initial `Hello` message containing the supported Ankaios version by the workload or the provided version in the message is not compatible with the ...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "183",
      "key": "REQ-D-Agent-183",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "183",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When an Ankaios agent receives an initial valid `Hello` message, the agent shall reply with a `ControlInterfaceAccepted` message, informing the workload that the connection has been accepted.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "184",
      "key": "REQ-D-Agent-184",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "184",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios agent receives a request from the output pipe of a workload in the protobuf format, then the Ankaios agent shall convert the received request into an internal `ToAnkaios` structure.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "185",
      "key": "REQ-D-Agent-185",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "185",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios agent receives a Control Interface request from a Workload, the Control Interface shall trigger the Authorizer to check if this Workload is allowed to make this request.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "186",
      "key": "REQ-D-Agent-186",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "186",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "If the Ankaios Agent receives a Control Interface request from a Workload and the request is denied, the Ankaios Agent shall send an error response to the corresponding Workloads input pipe.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "187",
      "key": "REQ-D-Agent-187",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "187",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Agent sends a denied request error response to a workload, the response shall contain the same request_id as the denied request.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "188",
      "key": "REQ-D-Agent-188",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "188",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Agent receives a Control Interface request from a Workload and the request is allowed, the Ankaios Agent shall forward this request to the Ankaios Server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "189",
      "key": "REQ-D-Agent-189",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "189",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When forwarding Control Interface requests from a Workload to the Ankaios server, the Ankaios Agents shall add the name of the Workload as prefix to the request_id of the Control Interface request.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "190",
      "key": "REQ-D-Agent-190",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "190",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When receiving a Control Interface response from the Ankaios Server, the Ankaios Agent shall forward this Control Interface response to the corresponding Workloads input pipe.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "191",
      "key": "REQ-D-Agent-191",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "191",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When forwarding a Control Interface response to a Workload, the Ankaios Agent shall determine the correct Workload, to forward the Control Interface response to, using the request_id prefix.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "192",
      "key": "REQ-D-Agent-192",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "192",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When forwarding a Control Interface response to a Workload, the Ankaios Server shall remove the request_id prefix before forwarding the Control Interface response.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "193",
      "key": "REQ-D-Agent-193",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "193",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios agent shall ensure, that Control Interface input pipes are opened and messages are read.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "194",
      "key": "REQ-D-Agent-194",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "194",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Control Interface detects that the output pipe buffer is full by waiting for more then 500ms for a write, the Control Interface handles the write attempt as failed due to a \"gone\" receiver/workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "195",
      "key": "REQ-D-Agent-195",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "195",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Control Interface detects a closed reading end of the output pipe while writing, the Control Interface retries the writes for 5 times in a 100ms interval before handling the write attempt as failed due to a gone receiver.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "196",
      "key": "REQ-D-Agent-196",
      "fields": {
        "summary": "Forwarding the Control Interface",
        "issuetype": {
          "id": "196",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Control Interface detects during a write attempt that a workload is \"gone\" and the write attempt was from a streaming type, i.e. log collection, the Control Interface cancels automatically the streaming session.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "197",
      "key": "REQ-D-Agent-197",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "197",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Control Interface Authorizer supports the following type of authorization rules: * `StateRule` - allowing or denying \"read\"s and/or \"write\"s to specified parts of the Complete State",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "198",
      "key": "REQ-D-Agent-198",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "198",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Authorizer checks if a Workload is allowed to make a request, the Authorizer shall use:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "199",
      "key": "REQ-D-Agent-199",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "199",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Authorizer checks if a workload is allowed to make a `LogsRequest`, the Authorizer shall:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "200",
      "key": "REQ-D-Agent-200",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "200",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Authorizer checks a workload name from a `LogsRequest` against a `LogRule`, the Authorizer shall consider workload name matching if an entry of the `LogRule`:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "201",
      "key": "REQ-D-Agent-201",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "201",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Authorizer checks if a workload is allowed to make a `LogsCancelRequest`, the Authorizer shall always allow the request.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "202",
      "key": "REQ-D-Agent-202",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "202",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Authorizer allows an `UpdateStateRequest` with an empty update mask or a `CompleteStateRequest` with an empty field mask only if all of the following is true:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "203",
      "key": "REQ-D-Agent-203",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "203",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Authorizer checks if a Workload is allowed to make a state request and all entries of the update/field mask are allowed,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "204",
      "key": "REQ-D-Agent-204",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "204",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Authorizer checks an individual entry of the update/field mask of a state request, the Authorizer shall allow this element if all of the following is true:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "205",
      "key": "REQ-D-Agent-205",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "205",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Authorizer checks if an individual entry of the update/field mask of a request matches an individual entry of the filter mask of an allow `StateRule`, the Authorizer shall consider them matching if all segments of the allow `StateRule`'s ...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "206",
      "key": "REQ-D-Agent-206",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "206",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Authorizer checks if an individual entry of the update/field mask of a request matches an individual entry of the filter mask of a deny `StateRule`, the Authorizer shall consider them matching if all segments of the allow `StateRule`'s fi...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "207",
      "key": "REQ-D-Agent-207",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "207",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Authorizer checks if an individual entry of the update/field mask of a request matches an individual entry of the filter mask of an allow or deny `StateRule`, the Authorizer shall consider them not matching if the `StateRule` has no segme...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "208",
      "key": "REQ-D-Agent-208",
      "fields": {
        "summary": "Authorizing access to the Control Interface",
        "issuetype": {
          "id": "208",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Authorizer checks if one segment of an individual entry of the update/field mask of an request matches on segment an individual entry of the filter mask of an allow or deny `StateRule`, the Authorizer shall consider them matching if one o...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "209",
      "key": "REQ-D-Agent-209",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "209",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The RuntimeConnectorInterface shall require the following options to be supported by the specific runtime connector for the providing workload logs: * follow - if the log shall be followed or not",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "210",
      "key": "REQ-D-Agent-210",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "210",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the AgentManager receives a `LogsRequest` message from the Ankaios server, the AgentManager shall delegate the start of the log collection to the WorkloadLogFacade.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "211",
      "key": "REQ-D-Agent-211",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "211",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadLogFacade is triggered by the AgentManager to start the log collection for a provided list of workloads, the WorkloadLogFacade shall: * request the RuntimeManager to create a log fetcher for each provided workload name",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "212",
      "key": "REQ-D-Agent-212",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "212",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the RuntimeManager gets a request to provide the log fetchers for a `LogsRequest`, the RuntimeManager shall trigger each specified in the request WorkloadObject to create a dedicated log fetcher.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "213",
      "key": "REQ-D-Agent-213",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "213",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadObject is called to start a log fetcher, it shall: * send a `StartLogFetcher` command via the WorkloadCommandSender to the WorkloadControlLoop",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "214",
      "key": "REQ-D-Agent-214",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "214",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadControlLoop creates a log fetcher, the WorkloadControlLoop shall: * create a dedicated log fetcher via the corresponding runtime connector",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "215",
      "key": "REQ-D-Agent-215",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "215",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the LogFetching initializes the log fetchers to start collecting logs, the LogFetching shall run each log fetcher in an asynchronous task returning a LogFetching runner object and the receiver end of the logs collection channel.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "216",
      "key": "REQ-D-Agent-216",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "216",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When a log fetcher is ran, it shall: * collect logs from a runtime specific log fetcher",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "217",
      "key": "REQ-D-Agent-217",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "217",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the podman log fetcher is ran, it shall: * request the logs from the podman runtime for the specified workload with all configured options",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "218",
      "key": "REQ-D-Agent-218",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "218",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the containerd log fetcher is ran, it shall: * request the logs from the containerd runtime for the specified workload with all configured options",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "219",
      "key": "REQ-D-Agent-219",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "219",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When a LogFetching runner gets dropped, the LogFetching shall stop the collection of logs for that log fetcher.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "220",
      "key": "REQ-D-Agent-220",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "220",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadLogFacade reads the logs from the log receivers, the WorkloadLogFacade shall send `LogEntriesResponse` messages containing the log entries of the workloads to the Ankaios server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "221",
      "key": "REQ-D-Agent-221",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "221",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadLogFacade detects that there are no more logs available for a workload, the WorkloadLogFacade shall send a `LogsStopResponse` message to the server communication channel provided by the communication middleware.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "222",
      "key": "REQ-D-Agent-222",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "222",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the WorkloadLogFacade has no more logs to forward for a log subscription, the WorkloadLogFacade shall delete the log subscription entry of the log collection from the SubscriptionStore.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "223",
      "key": "REQ-D-Agent-223",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "223",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the AgentManager receives a `LogsCancelRequest` message from the Ankaios server, the AgentManager shall delete the corresponding log subscription from the SubscriptionStore.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "224",
      "key": "REQ-D-Agent-224",
      "fields": {
        "summary": "Handling LogsRequests",
        "issuetype": {
          "id": "224",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the SubscriptionStore deletes an entry from its store, the SubscriptionStore shall abort the local log collection for this subscription entry.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "225",
      "key": "REQ-D-Agent-225",
      "fields": {
        "summary": "Handling connection interruption to server",
        "issuetype": {
          "id": "225",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the AgentManager receives a `ServerGone` message, the AgentManager shall delete all existing entries from its log SubscriptionStore.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "226",
      "key": "REQ-D-Ank-226",
      "fields": {
        "summary": "Design decisions",
        "issuetype": {
          "id": "226",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The CLI shall use its own proprietary tracing functions with following features:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "227",
      "key": "REQ-D-Ank-227",
      "fields": {
        "summary": "Design decisions",
        "issuetype": {
          "id": "227",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "While the CLI waits for a response from the Ankaios server, it stores all other messages received from the Ankaios server in a buffer,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "228",
      "key": "REQ-D-Ank-228",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "228",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall accept configuration files read at startup that specify the general startup configuration of the CLI with a lower precedence than environment variables and command line arguments.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "229",
      "key": "REQ-D-Ank-229",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "229",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall only directly communicate with the Ankaios Server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "230",
      "key": "REQ-D-Ank-230",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "230",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "All communication between Server and Ankaios CLI goes through a Communication Middleware plugin configured at compile time for the Ankaios Server and Ankaios CLI.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "231",
      "key": "REQ-D-Ank-231",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "231",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall support the cli argument `--server-url` (short alias `-s`) with value format `protocol://host:port`, alternatively configurable via the environment variable `ANK_SERVER_URL` which has lower priority compared to explicitly pro...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "232",
      "key": "REQ-D-Ank-232",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "232",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall be a standalone application (separate from the Ankaios Server and Client).",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "233",
      "key": "REQ-D-Ank-233",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "233",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall support the following cli arguments all of which contain a file path to a PEM file, alternatively configurable over environment variables which have lower priority compared to explicitly provided cli arguments:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "234",
      "key": "REQ-D-Ank-234",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "234",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall support the cli argument `--insecure` (short alias `-k`), alternatively configurable via the environment variable `ANK_INSECURE` which has lower priority compared to explicitly provided cli arguments.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "235",
      "key": "REQ-D-Ank-235",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "235",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the file paths of the root certificate, the CLI certificate and the CLI key is provided upon startup, then the Ankaios CLI shall provide each of these file paths to the communication middleware.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "236",
      "key": "REQ-D-Ank-236",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "236",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user runs the Ankaios CLI with enabled insecure communication and the Ankaios CLI initializes the communication middleware, then the Ankaios CLI shall instruct the communication middleware to use an insecure communication channel.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "237",
      "key": "REQ-D-Ank-237",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "237",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "If the user runs the Ankaios CLI without providing the cli arguments for the mTLS PEM file paths or the insecure cli argument, then the Ankaios CLI shall: * exit with a non zero exit code",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "238",
      "key": "REQ-D-Ank-238",
      "fields": {
        "summary": "`ank get state`",
        "issuetype": {
          "id": "238",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to get the desired state.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "239",
      "key": "REQ-D-Ank-239",
      "fields": {
        "summary": "`ank get state`",
        "issuetype": {
          "id": "239",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user invokes the CLI with a request to the get desired state, the CLI shall block and wait until the response from the Ankaios Server is received.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "240",
      "key": "REQ-D-Ank-240",
      "fields": {
        "summary": "`ank get state`",
        "issuetype": {
          "id": "240",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI receives the desired state from Ankaios Server, the CLI shall return this response to the user.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "241",
      "key": "REQ-D-Ank-241",
      "fields": {
        "summary": "`ank get state`",
        "issuetype": {
          "id": "241",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI receives the desired state from Ankaios Server via CLI communication interface, the CLI shall support the possibility to present the desired state as a JSON to the user.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "242",
      "key": "REQ-D-Ank-242",
      "fields": {
        "summary": "`ank get state`",
        "issuetype": {
          "id": "242",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI receives the desired state from Ankaios Server via CLI communication interface, the CLI shall support the possibility to present the desired state as a YAML to the user.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "243",
      "key": "REQ-D-Ank-243",
      "fields": {
        "summary": "`ank get state`",
        "issuetype": {
          "id": "243",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide an option to request and deliver only a part of the desired state.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "244",
      "key": "REQ-D-Ank-244",
      "fields": {
        "summary": "`ank get state`",
        "issuetype": {
          "id": "244",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When an object field mask is provided as additional argument, the Ankaios CLI shall return the compact state containing the values of the given fields.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "245",
      "key": "REQ-D-Ank-245",
      "fields": {
        "summary": "`ank get state`",
        "issuetype": {
          "id": "245",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user invokes the CLI with a request to get the desired state, the CLI shall display the field `apiVersion` of the desired state together with the requested desired state.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "246",
      "key": "REQ-D-Ank-246",
      "fields": {
        "summary": "`ank get workload`",
        "issuetype": {
          "id": "246",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to get the list of workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "247",
      "key": "REQ-D-Ank-247",
      "fields": {
        "summary": "`ank get workload`",
        "issuetype": {
          "id": "247",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user invokes the CLI with a request to get the list of workloads, the CLI shall block and wait until the response from the Ankaios Server is received.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "248",
      "key": "REQ-D-Ank-248",
      "fields": {
        "summary": "`ank get workload`",
        "issuetype": {
          "id": "248",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI is requested to retrieve the list of workloads from the Ankaios Server, the CLI shall: * request the whole CompleteState",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "249",
      "key": "REQ-D-Ank-249",
      "fields": {
        "summary": "`ank get workload`",
        "issuetype": {
          "id": "249",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI receives the list of workloads from the Ankaios Server via CLI communication interface, the CLI shall sort the list by workload name.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "250",
      "key": "REQ-D-Ank-250",
      "fields": {
        "summary": "`ank get workload`",
        "issuetype": {
          "id": "250",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI receives the list of workloads from the Ankaios Server via CLI communication interface and CLI has sorted the list",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "251",
      "key": "REQ-D-Ank-251",
      "fields": {
        "summary": "`ank get workload`",
        "issuetype": {
          "id": "251",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI receives the list of workloads from the Ankaios Server via CLI communication interface and CLI has sorted the list",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "252",
      "key": "REQ-D-Ank-252",
      "fields": {
        "summary": "`ank get workload`",
        "issuetype": {
          "id": "252",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI presents workloads to the user, the CLI shall display the workloads as a table with following columns:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "253",
      "key": "REQ-D-Ank-253",
      "fields": {
        "summary": "`ank get workload`",
        "issuetype": {
          "id": "253",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to set the desired state.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "254",
      "key": "REQ-D-Ank-254",
      "fields": {
        "summary": "`ank get workload`",
        "issuetype": {
          "id": "254",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to set the desired state.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "255",
      "key": "REQ-D-Ank-255",
      "fields": {
        "summary": "`ank set state`",
        "issuetype": {
          "id": "255",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to set the desired state.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "256",
      "key": "REQ-D-Ank-256",
      "fields": {
        "summary": "`ank set state`",
        "issuetype": {
          "id": "256",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user invokes the CLI with a request to set the desired state, the CLI shall request an update of the state including a watch on the updated workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "257",
      "key": "REQ-D-Ank-257",
      "fields": {
        "summary": "`ank set state`",
        "issuetype": {
          "id": "257",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI executes an update of the Ankaios state including a watch on the updated workloads, the CLI shall: * request the current CompleteState from the Ankaios server",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "258",
      "key": "REQ-D-Ank-258",
      "fields": {
        "summary": "`ank set state`",
        "issuetype": {
          "id": "258",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI executes an update of the Ankaios state including a watch on the updated workloads and the Ankaios server responds with an error, the CLI shall present the error to the user.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "259",
      "key": "REQ-D-Ank-259",
      "fields": {
        "summary": "`ank set state`",
        "issuetype": {
          "id": "259",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI executes an update of the Ankaios state including a watch on the updated workloads and the Ankaios server responds with a success message containing the IDs of the changed workloads",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "260",
      "key": "REQ-D-Ank-260",
      "fields": {
        "summary": "`ank set state`",
        "issuetype": {
          "id": "260",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI watches a list of workloads, the CLI shall: * get the CompleteState from the Ankaios server",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "261",
      "key": "REQ-D-Ank-261",
      "fields": {
        "summary": "`ank set state`",
        "issuetype": {
          "id": "261",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI checks if a workload has reached its final expected state, the CLI shall regard the state for final if the agent managing that workload is disconnected or the execution state is one of: * Running(Ok)",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "262",
      "key": "REQ-D-Ank-262",
      "fields": {
        "summary": "`ank set state`",
        "issuetype": {
          "id": "262",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user invokes the CLI with a request to the set desired state, the CLI shall support files in YAML format with the state object.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "263",
      "key": "REQ-D-Ank-263",
      "fields": {
        "summary": "`ank delete workload`",
        "issuetype": {
          "id": "263",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to delete workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "264",
      "key": "REQ-D-Ank-264",
      "fields": {
        "summary": "`ank delete workload`",
        "issuetype": {
          "id": "264",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user invokes the CLI with a request to delete workloads, the CLI shall request an update of the state including a watch on the updated workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "265",
      "key": "REQ-D-Ank-265",
      "fields": {
        "summary": "`ank run workload`",
        "issuetype": {
          "id": "265",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to run workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "266",
      "key": "REQ-D-Ank-266",
      "fields": {
        "summary": "`ank run workload`",
        "issuetype": {
          "id": "266",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user invokes the CLI with a request to run a workload, the CLI shall request an update of the state including a watch on the updated workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "267",
      "key": "REQ-D-Ank-267",
      "fields": {
        "summary": "- agent name",
        "issuetype": {
          "id": "267",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI apply command shall support the Ankaios manifest file format.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "268",
      "key": "REQ-D-Ank-268",
      "fields": {
        "summary": "- agent name",
        "issuetype": {
          "id": "268",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user calls the Ankaios Cli `apply` command with one or multiple files, the Ankaios CLI shall process the content of all provided files.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "269",
      "key": "REQ-D-Ank-269",
      "fields": {
        "summary": "- agent name",
        "issuetype": {
          "id": "269",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user calls the Ankaios CLI `apply` command with a file named `-`, the Ankaios CLI shall read data from stdin.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "270",
      "key": "REQ-D-Ank-270",
      "fields": {
        "summary": "- agent name",
        "issuetype": {
          "id": "270",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user does not provide the optional argument `-d` and the Ankaios CLI accepts the manifest content from file(s) or from `stdin`,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "271",
      "key": "REQ-D-Ank-271",
      "fields": {
        "summary": "- agent name",
        "issuetype": {
          "id": "271",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios CLI accepts the manifest content from file(s) or from `stdin`, the Ankaios CLI shall parse the manifest content into a list of filter masks.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "272",
      "key": "REQ-D-Ank-272",
      "fields": {
        "summary": "- agent name",
        "issuetype": {
          "id": "272",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user calls the Ankaios CLI `apply` command and the CLI has generated a state object from the input",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "273",
      "key": "REQ-D-Ank-273",
      "fields": {
        "summary": "- agent name",
        "issuetype": {
          "id": "273",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user provides the optional argument `--agent` and the Ankaios CLI parses the manifest content into a state object,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "274",
      "key": "REQ-D-Ank-274",
      "fields": {
        "summary": "- agent name",
        "issuetype": {
          "id": "274",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the agent name is not specified in a workload specification and the user does not provide the agent name via the optional argument `--agent`",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "275",
      "key": "REQ-D-Ank-275",
      "fields": {
        "summary": "- agent name",
        "issuetype": {
          "id": "275",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user provides an incompatible API version the Ankaios CLI shall terminate with an error.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "276",
      "key": "REQ-D-Ank-276",
      "fields": {
        "summary": "`ank get agents`",
        "issuetype": {
          "id": "276",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to get the list of Ankaios agents connected to the Ankaios server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "277",
      "key": "REQ-D-Ank-277",
      "fields": {
        "summary": "`ank get agents`",
        "issuetype": {
          "id": "277",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios CLI presents connected Ankaios agents to the user, the Ankaios CLI shall present the agents as rows in a table with the following content:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "278",
      "key": "REQ-D-Ank-278",
      "fields": {
        "summary": "`ank get agents`",
        "issuetype": {
          "id": "278",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user invokes the CLI with a request to provide the list of connected Ankaios agents, the Ankaios CLI shall: * request the whole CompleteState of Ankaios server",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "279",
      "key": "REQ-D-Ank-279",
      "fields": {
        "summary": "`ank get config`",
        "issuetype": {
          "id": "279",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to get the list of configs.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "280",
      "key": "REQ-D-Ank-280",
      "fields": {
        "summary": "`ank get config`",
        "issuetype": {
          "id": "280",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI receives the list of configs from the Ankaios Server via CLI communication interface, the CLI shall sort the list by alphanumerical criteria.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "281",
      "key": "REQ-D-Ank-281",
      "fields": {
        "summary": "`ank get config`",
        "issuetype": {
          "id": "281",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI receives the list of configs from the Ankaios Server via CLI communication interface and CLI has sorted the list,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "282",
      "key": "REQ-D-Ank-282",
      "fields": {
        "summary": "`ank get config`",
        "issuetype": {
          "id": "282",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI presents configs to the user, the CLI shall display the configs as: CONFIG",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "283",
      "key": "REQ-D-Ank-283",
      "fields": {
        "summary": "`ank delete configs`",
        "issuetype": {
          "id": "283",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to delete configs.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "284",
      "key": "REQ-D-Ank-284",
      "fields": {
        "summary": "`ank logs`",
        "issuetype": {
          "id": "284",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to output the logs of multiple workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "285",
      "key": "REQ-D-Ank-285",
      "fields": {
        "summary": "`ank logs`",
        "issuetype": {
          "id": "285",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user invokes the Ankaios CLI to output logs for specific workloads by providing their workload names, the Ankaios CLI shall: * convert the provided workload names into workload instance names",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "286",
      "key": "REQ-D-Ank-286",
      "fields": {
        "summary": "`ank logs`",
        "issuetype": {
          "id": "286",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios CLI samples workload names to workload instance names for logs requests, the Ankaios CLI shall: * request the CompleteState with field mask `workloadStates` from the Ankaios Server",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "287",
      "key": "REQ-D-Ank-287",
      "fields": {
        "summary": "`ank logs`",
        "issuetype": {
          "id": "287",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI listens for workload logs to the Ankaios server and receives a response message from the server, the Ankaios CLI shall: * output the logs if the response is a `LogEntriesResponse` containing logs of a workload",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "288",
      "key": "REQ-D-Ank-288",
      "fields": {
        "summary": "`ank logs`",
        "issuetype": {
          "id": "288",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CLI outputs logs to the terminal, the Ankaios CLI shall output each log entry in the following format:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "289",
      "key": "REQ-D-Ank-289",
      "fields": {
        "summary": "`ank logs`",
        "issuetype": {
          "id": "289",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios CLI stops the log output for a workload instance name, the CLI shall: * remove the instance name from the list of requested instance names for log output",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "290",
      "key": "REQ-D-Ank-290",
      "fields": {
        "summary": "`ank logs`",
        "issuetype": {
          "id": "290",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios CLI listens to the Ankaios server for logs and the CLI receives a termination signal, the Ankaios CLI shall send a `LogsCancelRequest` to the Ankaios server to stop the log collection.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "291",
      "key": "REQ-D-Ank-291",
      "fields": {
        "summary": "CLI termination signal handling",
        "issuetype": {
          "id": "291",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios CLI shall provide a function to listen to the following `unix` signals to handle them as termination signals:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "292",
      "key": "REQ-D-Ank-292",
      "fields": {
        "summary": "Handling other message while waiting for response",
        "issuetype": {
          "id": "292",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "While the Ankaios CLI waits for a response from the Ankaios Server, the Ankaios CLI shall store all unrelated received messages for later processing.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "293",
      "key": "REQ-D-Ank-293",
      "fields": {
        "summary": "Shell completion",
        "issuetype": {
          "id": "293",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user starts typing an Ankaios CLI command, the zsh and bash shell shall propose completions for arguments including dynamic completions for workload names, object field masks and agents.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "294",
      "key": "REQ-D-Ank-294",
      "fields": {
        "summary": "CliTable allows creation of different table output formats",
        "issuetype": {
          "id": "294",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The CliTable shall provide a function to create a table output with the following table layout: * table style blank",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "295",
      "key": "REQ-D-Ank-295",
      "fields": {
        "summary": "CliTable allows creation of different table output formats",
        "issuetype": {
          "id": "295",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The CliTable shall provide a function to create a table output with wrapping a specific column to the remaining terminal width with the following table layout: * table style blank",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "296",
      "key": "REQ-D-Ank-296",
      "fields": {
        "summary": "CliTable allows creation of different table output formats",
        "issuetype": {
          "id": "296",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The CliTable shall provide a function to create a table output with truncating a specific column to the remaining terminal width with the following table layout: * table style blank",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "297",
      "key": "REQ-D-Ank-297",
      "fields": {
        "summary": "CliTable allows creation of different table output formats",
        "issuetype": {
          "id": "297",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the CliTable is requested to create a table with a wrapped or truncated column, the CliTable shall: * determine the column name length of this column",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "298",
      "key": "REQ-D-Server-298",
      "fields": {
        "summary": "Design decisions",
        "issuetype": {
          "id": "298",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Ankaios uses the handlebars crate to render the configs provided for a workload.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "299",
      "key": "REQ-D-Server-299",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "299",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios server shall accept configuration files read at startup that specify the general startup configuration of the server with a lower precedence than environment variables and command line arguments.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "300",
      "key": "REQ-D-Server-300",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "300",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios Server shall hold the Current State in memory.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "301",
      "key": "REQ-D-Server-301",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "301",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server starts up and a startup configuration file in the format YAML is provided, Ankaios shall load the Startup State specified in the startup configuration as Current State.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "302",
      "key": "REQ-D-Server-302",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "302",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios server is started without a startup config, the server shall start with an empty current state.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "303",
      "key": "REQ-D-Server-303",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "303",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "StartupStateLoader shall support parsing the Startup State as yaml.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "304",
      "key": "REQ-D-Server-304",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "304",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios server adds a new workload to its desired state, the workload state of this workload shall be set to `Pending(Initial)` if the workload is assigned to an agent or to `NotScheduled` otherwise.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "305",
      "key": "REQ-D-Server-305",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "305",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the StartupStateLoader parses the yaml file with Startup State, it shall reject the file which is not conform to the verification schema.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "306",
      "key": "REQ-D-Server-306",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "306",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Startup State is invalid, the server shall not start.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "307",
      "key": "REQ-D-Server-307",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "307",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "All communication with the Ankaios Agents shall go through the Communication Middleware.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "308",
      "key": "REQ-D-Server-308",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "308",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios Server shall use per default a gRPC Communication Middleware.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "309",
      "key": "REQ-D-Server-309",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "309",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios Server shall use asynchronous communication channels from the Common library.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "310",
      "key": "REQ-D-Server-310",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "310",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios server shall support the following cli arguments all of which contain a file path to a PEM file, alternatively configurable over environment variables which have lower priority compared to explicitly provided cli arguments:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "311",
      "key": "REQ-D-Server-311",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "311",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios server shall support the cli argument `--insecure` (short alias `-k`), alternatively configurable via the environment variable `ANKSERVER_INSECURE` which has lower priority compared to explicitly provided cli arguments.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "312",
      "key": "REQ-D-Server-312",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "312",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the user starts the Ankaios server with the arguments `-k` or `--insecure` and the Ankaios server initializes the communication middleware, then the Ankaios server shall instruct the communication middleware to use an insecure communication c...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "313",
      "key": "REQ-D-Server-313",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "313",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the file paths of the root certificate, the server certificate and the server key is provided upon startup, then the Ankaios server shall provide each of these file paths to the communication middleware.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "314",
      "key": "REQ-D-Server-314",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "314",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "If the user starts the Ankaios server without specifying the cli arguments for the mTLS PEM file paths or the insecure cli argument, then the Ankaios server shall: * exit with a non zero exit code",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "315",
      "key": "REQ-D-Server-315",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "315",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When an Agent connects to the Server, the Ankaios Server shall send a list of all scheduled Workloads to this Agent as `ServerHello` message.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "316",
      "key": "REQ-D-Server-316",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "316",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios Server shall select the workloads targeted at an agent based on the `agent` field.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "317",
      "key": "REQ-D-Server-317",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "317",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When startup state is loaded and the ToServer message AgentHello is received from an Ankaios Agent, the Ankaios Server shall send all Workload States of other connected agents to that agent.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "318",
      "key": "REQ-D-Server-318",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "318",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When an Agent connects to the Ankaios server, the Ankaios server shall instruct the ServerState to store the newly connected agent within its state.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "319",
      "key": "REQ-D-Server-319",
      "fields": {
        "summary": "Startup sequence",
        "issuetype": {
          "id": "319",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState is triggered to store the agent, the ServerState shall create an entry of the agent in the `agents` field of the `CompleteState`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "320",
      "key": "REQ-D-Server-320",
      "fields": {
        "summary": "Distribution of Workload State update sequence",
        "issuetype": {
          "id": "320",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ToServer message UpdateWorkloadState is received by the Ankaios Server from an Ankaios Agent, the Ankaios Server shall distribute the FromServer message UpdateWorkloadState to all connected agents other than the one which send the ToServe...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "321",
      "key": "REQ-D-Server-321",
      "fields": {
        "summary": "Distribution of Workload State update sequence",
        "issuetype": {
          "id": "321",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ToServer message UpdateWorkloadState is received by the Ankaios Server from an Ankaios Agent, the Ankaios Server shall store all the Workload States of that Ankaios Agent in the WorkloadStatesMap.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "322",
      "key": "REQ-D-Server-322",
      "fields": {
        "summary": "Workload State update on disconnected agents",
        "issuetype": {
          "id": "322",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ToServer message AgentGone is received by the Ankaios server from an Ankaios agent, the Ankaios server shall set all the Workload States of that agent to `agent disconnected`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "323",
      "key": "REQ-D-Server-323",
      "fields": {
        "summary": "Workload State update on disconnected agents",
        "issuetype": {
          "id": "323",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ToServer message AgentGone is received by the Ankaios server from an Ankaios Agent, the Ankaios server shall distribute the Workload States of that disconnected Ankaios agent via the FromServer message UpdateWorkloadState to all remaining...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "324",
      "key": "REQ-D-Server-324",
      "fields": {
        "summary": "Control Interface",
        "issuetype": {
          "id": "324",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios Server provides an interface to get the CompleteState. The CompleteState includes:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "325",
      "key": "REQ-D-Server-325",
      "fields": {
        "summary": "Control Interface",
        "issuetype": {
          "id": "325",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server responses to a GetCompleteState request and the request contains a `field_mask`, the response includes the filed `api_version` and the fields listed in the `field_mask`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "326",
      "key": "REQ-D-Server-326",
      "fields": {
        "summary": "Control Interface",
        "issuetype": {
          "id": "326",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server responses to a GetCompleteState request, it includes the RequestID from the GetCompleteState request.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "327",
      "key": "REQ-D-Server-327",
      "fields": {
        "summary": "Control Interface",
        "issuetype": {
          "id": "327",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Ankaios Server provides an UpdateState interface.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "328",
      "key": "REQ-D-Server-328",
      "fields": {
        "summary": "Control Interface",
        "issuetype": {
          "id": "328",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server gets an UpdateStateRequest with empty update_mask, the Ankaios Server replaces its DesiredState with the newState from the UpdateStateRequest.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "329",
      "key": "REQ-D-Server-329",
      "fields": {
        "summary": "Control Interface",
        "issuetype": {
          "id": "329",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server gets an UpdateStateRequest with a non empty update_mask, the Ankaios Server replaces each field of its DesiredState listed in the update_mask, with the value of the same field of the newState from the UpdateStateRequest.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "330",
      "key": "REQ-D-Server-330",
      "fields": {
        "summary": "Control Interface",
        "issuetype": {
          "id": "330",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server gets an UpdateStateRequest which can be successfully applied, the Ankaios Server shall respond to the request with the Ids of the updated workloads.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "331",
      "key": "REQ-D-Server-331",
      "fields": {
        "summary": "Control Interface",
        "issuetype": {
          "id": "331",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server gets an UpdateStateRequest with an API version which is not identical to the API version expected by the Ankaios Server, the Ankaios Server shall reject the request and keep on listening for incoming requests.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "332",
      "key": "REQ-D-Server-332",
      "fields": {
        "summary": "Control Interface",
        "issuetype": {
          "id": "332",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server gets an UpdateStateRequest without set API version, the Ankaios Server shall reject the request and keep on listening for incoming requests.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "333",
      "key": "REQ-D-Server-333",
      "fields": {
        "summary": "Control Interface",
        "issuetype": {
          "id": "333",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server gets an UpdateStateRequest, the server shall enforce the desired state field conventions defined in the common library.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "334",
      "key": "REQ-D-Server-334",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "334",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server gets the `ToServer` message `UpdateStateRequest` and detects a change of the state where a workload is present only in the New State, the Ankaios Server shall send a `FromServer` message to the corresponding Ankaios Agent t...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "335",
      "key": "REQ-D-Server-335",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "335",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server gets the `ToServer` message `UpdateStateRequest` and detects a change of the state where a workload is present only in the Current State, the Ankaios Server shall send a `FromServer` message to the corresponding Ankaios Age...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "336",
      "key": "REQ-D-Server-336",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "336",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server gets the `ToServer` message `UpdateStateRequest` and detects a change of the state where a workload is present in both states and at least one field of the workload is different,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "337",
      "key": "REQ-D-Server-337",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "337",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState determines changes in its State, the ServerState shall compare the rendered workload configurations of its current and new DesiredState.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "338",
      "key": "REQ-D-Server-338",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "338",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState is requested to update its State and the ServerState detects no change of workloads in its State, the ServerState shall replace its current DesiredState with the new DesiredState.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "339",
      "key": "REQ-D-Server-339",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "339",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState is requested to update its State, the ServerState shall trigger the ConfigRenderer to render the workloads with the configuration items in the CompleteState.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "340",
      "key": "REQ-D-Server-340",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "340",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState receives successfully rendered workloads from the ConfigRenderer, the ServerState shall trigger the workload to validate the format of its internal fields.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "341",
      "key": "REQ-D-Server-341",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "341",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ConfigRenderer is requested to render the workloads with configuration items, for each provided workload that references config items inside its `configs` field, the ConfigRenderer shall: * create a data structure containing memory refere...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "342",
      "key": "REQ-D-Server-342",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "342",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The ConfigRenderer shall support rendering templates with keeping line indentation.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "343",
      "key": "REQ-D-Server-343",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "343",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState is requested to update its State and the new State has a cycle in the workload dependencies, the server shall reject the new State as invalid.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "344",
      "key": "REQ-D-Server-344",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "344",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState searches for cycles within the dependency graph of the State, the ServerState shall stop at the first detected cycle.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "345",
      "key": "REQ-D-Server-345",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "345",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState searches for cycles within the dependency graph of the State and it encounters an edge in the dependency graph that refers to a workload that does not occur in the workload nodes,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "346",
      "key": "REQ-D-Server-346",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "346",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState rejects an updated state, the server shall continue to listen for incoming requests.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "347",
      "key": "REQ-D-Server-347",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "347",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState adds a new workload to its State and the workload has a dependency with the AddCondition equal to `ADD_COND_RUNNING`,",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "348",
      "key": "REQ-D-Server-348",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "348",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState deletes a workload from its State, the ServerState shall insert the DeleteConditions from the delete graph into the `DeletedWorkload` message.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "349",
      "key": "REQ-D-Server-349",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "349",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios server distributes `DeletedWorkload` message and either the deleted workload is not scheduled (agent is empty) or its execution state is `Pending(Initial)` and its agent is disconnected, the Ankaios server shall handle the deletion.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "350",
      "key": "REQ-D-Server-350",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "350",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios server receives a new agent load status, the Ankaios server shall trigger the ServerState to update the connected agent's resource availability with the provided new agent load status.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "351",
      "key": "REQ-D-Server-351",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "351",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState receives a new agent load status, the ServerState shall update its internal state with agent node resource availability information regarding the cpu usage and the free memory.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "352",
      "key": "REQ-D-Server-352",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "352",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios Server receives new workload states, then the Ankaios Server shall trigger the ServerState to cleanup its internal state providing it the new workload states.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "353",
      "key": "REQ-D-Server-353",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "353",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState receives a trigger to cleanup its state, the ServerState shall request the DeleteGraph to delete all entries for which there is a WorkloadState `Removed` in the list of provided workload states.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "354",
      "key": "REQ-D-Server-354",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "354",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ToServer message AgentGone is received by the Ankaios server from an Ankaios agent, the AnkaiosServer shall instruct the ServerState to remove the agent from its internal state.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "355",
      "key": "REQ-D-Server-355",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "355",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState is triggered to remove the agent from its state, the ServerState shall remove the entry of the agent in the `agents` field of the `CompleteState`.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "356",
      "key": "REQ-D-Server-356",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "356",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ServerState is triggered to check if an agent is part of its state, the ServerState shall check if the `agents` field of the `CompleteState` contains the agent name passed as argument.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "357",
      "key": "REQ-D-Server-357",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "357",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ToServer message `LogEntriesResponse` is received by the Ankaios server from an Ankaios Agent, the Ankaios server shall distribute the FromServer message `LogEntriesResponse` to the agent communication channel provided by the Communicatio...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "358",
      "key": "REQ-D-Server-358",
      "fields": {
        "summary": "Update Desired State",
        "issuetype": {
          "id": "358",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the ToServer message `LogsStopResponse` is received by the Ankaios server from an Ankaios agent, the Ankaios server shall distribute the FromServer message `LogsStopResponse` to the agent communication channel provided by the Communication Mi...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "359",
      "key": "REQ-D-Server-359",
      "fields": {
        "summary": "Handle workload log campaigns",
        "issuetype": {
          "id": "359",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The LogCampaignStore holds metadata about log campaigns from different log collectors with the following functionalities: * inserting a new log campaign for a logs request received from the Ankaios CLI or a workload",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "360",
      "key": "REQ-D-Server-360",
      "fields": {
        "summary": "Handle workload log campaigns",
        "issuetype": {
          "id": "360",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios server receives a `LogsRequest` message from the channel provided by the communication middleware, the Ankaios server shall: * filter the requested workload instance names s.t. only logs of workloads currently in the desired state...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "361",
      "key": "REQ-D-Server-361",
      "fields": {
        "summary": "Handle workload log campaigns",
        "issuetype": {
          "id": "361",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios server receives a `LogsCancelRequest` message from the channel provided by the communication middleware, the Ankaios server shall: * trigger the LogCampaignStore to remove the log campaign by providing the request ID",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "362",
      "key": "REQ-D-Server-362",
      "fields": {
        "summary": "Handle workload log campaigns",
        "issuetype": {
          "id": "362",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios server receives a `AgentGone` message from the channel provided by the communication middleware, the Ankaios server shall: * trigger the LogCampaignStore to remove the log campaigns managed by the disconnected agent by providing t...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "363",
      "key": "REQ-D-Server-363",
      "fields": {
        "summary": "Handle workload log campaigns",
        "issuetype": {
          "id": "363",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios server receives a `UpdateStateRequest` message from the channel provided by the communication middleware and detects deleted workloads, the Ankaios server shall cancel the log campaign for each deleted workload collecting logs by:...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "364",
      "key": "REQ-D-Server-364",
      "fields": {
        "summary": "Handle workload log campaigns",
        "issuetype": {
          "id": "364",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the Ankaios server receives a `Goodbye` message from the channel provided by the communication middleware, the Ankaios server shall: * trigger the LogCampaignStore to delete the log campaign entry for the cli by providing cli connection name",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "365",
      "key": "REQ-D-Common-365",
      "fields": {
        "summary": "Design decisions",
        "issuetype": {
          "id": "365",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide an asynchronous communication channel that supports sending and receiving the `FromServer` message.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "366",
      "key": "REQ-D-Common-366",
      "fields": {
        "summary": "FromServerChannel",
        "issuetype": {
          "id": "366",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide an asynchronous communication channel that supports sending and receiving the `FromServer` message.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "367",
      "key": "REQ-D-Common-367",
      "fields": {
        "summary": "ToServerChannel",
        "issuetype": {
          "id": "367",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide an asynchronous communication channel that supports sending and receiving the `ToServer` message.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "368",
      "key": "REQ-D-Common-368",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "368",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide data structures for all objects that need to be sent through the asynchronous communication channels.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "369",
      "key": "REQ-D-Common-369",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "369",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Ankaios shall support the following execution states with substates for a workload:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "370",
      "key": "REQ-D-Common-370",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "370",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The WorkloadStatesMap represents the current execution states of the managed by Ankaios workloads and allows performant management of the states by providing the following functionalities: * getting all workload states for an agent",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "371",
      "key": "REQ-D-Common-371",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "371",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The WorkloadStatesMap represents the current execution states of the managed by Ankaios workloads and allows performant management of the states by providing the following functionalities: * getting all workload states for an agent",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "372",
      "key": "REQ-D-Common-372",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "372",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Ankaios shall support a string with additional information for the workload execution state.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "373",
      "key": "REQ-D-Common-373",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "373",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Ankaios shall support workload execution state identification by the combination of:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "374",
      "key": "REQ-D-Common-374",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "374",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The AgentMap provides the following functionalities: * inserting an agent name with default attributes",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "375",
      "key": "REQ-D-Common-375",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "375",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Ankaios shall support the following add conditions for a workload dependency: * `running` - the workload is operational",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "376",
      "key": "REQ-D-Common-376",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "376",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Ankaios shall support the following delete conditions for a workload dependency: * `running` - the workload is operational",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "377",
      "key": "REQ-D-Common-377",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "377",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide a sorted serialization of unordered data structures.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "378",
      "key": "REQ-D-Common-378",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "378",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When allow rules for the Control Interface access are specified in the workload specification, the Common library shall approve the creation of a Control Interface.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "379",
      "key": "REQ-D-Common-379",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "379",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the field `files` of the workload specification contains at least one entry, the Common library shall approve the mount of the workload files specified in the field.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "380",
      "key": "REQ-D-Common-380",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "380",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide functionality for retrieving the Workload execution instance name of the workload in the following naming schema:",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "381",
      "key": "REQ-D-Common-381",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "381",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide functionality for enforcing a workload name to: * contain only regular upper and lowercase characters (a-z and A-Z), numbers and the symbols \"-\" and \"_\"",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "382",
      "key": "REQ-D-Common-382",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "382",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide functionality for enforcing an agent name to contain only regular upper and lowercase characters (a-z and A-Z), numbers and the symbols \"-\" and \"_\".",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "383",
      "key": "REQ-D-Common-383",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "383",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide functionality for enforcing a config item key to contain only regular upper and lowercase characters (a-z and A-Z), numbers and the symbols \"-\" and \"_\".",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "384",
      "key": "REQ-D-Common-384",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "384",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide functionality for enforcing a workload's config reference key value pairs to contain only regular upper and lowercase characters (a-z and A-Z), numbers and the symbols \"-\" and \"_\".",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "385",
      "key": "REQ-D-Common-385",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "385",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide functionality for enforcing a non-empty filter mask for Control Interface access `StateRule`s.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "386",
      "key": "REQ-D-Common-386",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "386",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide functionality for enforcing the validity of workload names in Control Interface access `LogRule`s: - to contain at most one wildcard symbol \"*\"",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "387",
      "key": "REQ-D-Common-387",
      "fields": {
        "summary": "Objects",
        "issuetype": {
          "id": "387",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide conversion functions between Ankaios objects and protobuf objects.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "388",
      "key": "REQ-D-Common-388",
      "fields": {
        "summary": "Common interface definitions",
        "issuetype": {
          "id": "388",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide interface used by Ankaios' libraries and executables.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "389",
      "key": "REQ-D-Common-389",
      "fields": {
        "summary": "Common Helpers",
        "issuetype": {
          "id": "389",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide helper methods used by Ankaios' libraries and executables.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "390",
      "key": "REQ-D-Common-390",
      "fields": {
        "summary": "Common Helpers",
        "issuetype": {
          "id": "390",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The Common library shall provide a common version checking functionality that fails if a provided version differs from the current major and minor one.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "391",
      "key": "REQ-D-gRPC-391",
      "fields": {
        "summary": "Design decisions",
        "issuetype": {
          "id": "391",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Ankaios uses the tonic crate to handle gRPC communication and automatic protobuf code generation.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "392",
      "key": "REQ-D-gRPC-392",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "392",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Upon startup, the gRPC Server shall create a gRPC Agent Connection responsible for handling calls from the gRPC Client",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "393",
      "key": "REQ-D-gRPC-393",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "393",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Upon startup, the gRPC Server shall create a gRPC CLI Connection responsible for handling calls from the gRPC Client",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "394",
      "key": "REQ-D-gRPC-394",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "394",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "After the gRPC Agent Connection is created, the gRPC Server shall spawn a tonic gRPC service in a new green thread.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "395",
      "key": "REQ-D-gRPC-395",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "395",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Server shall provide a gRPC endpoint for handling the gRPC CLI connection.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "396",
      "key": "REQ-D-gRPC-396",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "396",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Client shall retry the gRPC Agent Connection to gRPC Server upon connection loss with a timeout of 1 second.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "397",
      "key": "REQ-D-gRPC-397",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "397",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Client shall not retry the gRPC CLI Connection to gRPC Server upon any connection errors.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "398",
      "key": "REQ-D-gRPC-398",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "398",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Client shall output error message if the gRPC Server is not available while establishing the gRPC CLI Connection.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "399",
      "key": "REQ-D-gRPC-399",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "399",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Client shall output error message when losing gRPC CLI Connection to the gRPC Server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "400",
      "key": "REQ-D-gRPC-400",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "400",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Before connecting to the gRPC Server, the gRPC Client shall create a ToServer Channel for sending commands to the gRPC Server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "401",
      "key": "REQ-D-gRPC-401",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "401",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Client shall connect with the gRPC Server by sending `AgentHello` and the receiving side of the ToServer Channel.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "402",
      "key": "REQ-D-gRPC-402",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "402",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Client shall establish a gRPC CLI Connection to the gRPC Server by using a unique name.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "403",
      "key": "REQ-D-gRPC-403",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "403",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Client shall send the Ankaios version it was built with in the first message to the gRPC Server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "404",
      "key": "REQ-D-gRPC-404",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "404",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "For each received connection request, the gRPC Agent Connection shall create a new FromServer Channel for this agent.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "405",
      "key": "REQ-D-gRPC-405",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "405",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "For each received connection request, the gRPC Agent Connection shall: * check the received version for compatibility",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "406",
      "key": "REQ-D-gRPC-406",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "406",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "For each received connection request, the gRPC Agent Connection shall store the created FromServer Channel in the Agent Senders Map.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "407",
      "key": "REQ-D-gRPC-407",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "407",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Agent Connection shall respond to the connection request of the gRPC Client with the receiving side of an FromServer Channel.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "408",
      "key": "REQ-D-gRPC-408",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "408",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Agent Connection shall forward the AgentHello message to the Ankaios Server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "409",
      "key": "REQ-D-gRPC-409",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "409",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "For each received connection request, the gRPC Commander Connection shall create a new FromServer Channel for this agent.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "410",
      "key": "REQ-D-gRPC-410",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "410",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "For each received connection request, the gRPC Commander Connection shall: * check the received version for compatibility",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "411",
      "key": "REQ-D-gRPC-411",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "411",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "For each received connection request, the gRPC Commander Connection shall store the created FromServer Channel in the Commander Senders Map.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "412",
      "key": "REQ-D-gRPC-412",
      "fields": {
        "summary": "Startup",
        "issuetype": {
          "id": "412",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Commander Connection shall respond to the connection request of the gRPC Client with the receiving side of an FromServer Channel.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "413",
      "key": "REQ-D-gRPC-413",
      "fields": {
        "summary": "Secure mTLS and insecure communication",
        "issuetype": {
          "id": "413",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When a PEM file is provided as certificate, the gRPC middleware shall: * parse the given PEM file into x509 certificate buffer format.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "414",
      "key": "REQ-D-gRPC-414",
      "fields": {
        "summary": "Secure mTLS and insecure communication",
        "issuetype": {
          "id": "414",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When a PEM file is provided as a key, the gRPC middleware shall: * parse the given PEM file into a buffer containing the key.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "415",
      "key": "REQ-D-gRPC-415",
      "fields": {
        "summary": "Secure mTLS and insecure communication",
        "issuetype": {
          "id": "415",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When a PEM file is provided, the gRPC middleware shall check the given PEM file to have one of the following unix file permission: * 400",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "416",
      "key": "REQ-D-gRPC-416",
      "fields": {
        "summary": "Secure mTLS and insecure communication",
        "issuetype": {
          "id": "416",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the root certificate, the server certificate and the server key is provided upon start of the gRPC server, the gRPC server shall use the provided certificates and the key to activate mTLS for the gRPC communication between the involved parties.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "417",
      "key": "REQ-D-gRPC-417",
      "fields": {
        "summary": "Secure mTLS and insecure communication",
        "issuetype": {
          "id": "417",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When no root certificate, no server certificate and no server key are provided upon start of the gRPC server, the gRPC server shall establish a gRPC communication between the involved parties without mTLS.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "418",
      "key": "REQ-D-gRPC-418",
      "fields": {
        "summary": "Secure mTLS and insecure communication",
        "issuetype": {
          "id": "418",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the root certificate, the agent certificate and the agent key is provided upon start of the gRPC agent connection, the gRPC agent client shall use the provided certificates and the key to activate mTLS for the gRPC communication between the i...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "419",
      "key": "REQ-D-gRPC-419",
      "fields": {
        "summary": "Secure mTLS and insecure communication",
        "issuetype": {
          "id": "419",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When no root certificate, no agent certificate and no agent key are provided upon start of the gRPC agent connection, the gRPC agent client shall establish a gRPC communication between the involved parties without mTLS.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "420",
      "key": "REQ-D-gRPC-420",
      "fields": {
        "summary": "Secure mTLS and insecure communication",
        "issuetype": {
          "id": "420",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the root certificate, the cli certificate and the cli key is provided upon start of the gRPC cli connection, the gRPC cli client shall use the provided certificates and the key to activate mTLS for the gRPC communication between the involved ...",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "421",
      "key": "REQ-D-gRPC-421",
      "fields": {
        "summary": "Secure mTLS and insecure communication",
        "issuetype": {
          "id": "421",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When no root certificate, no cli certificate and no cli key are provided upon start of the gRPC cli connection, the gRPC cli client shall deactivate mTLS for the gRPC communication between the involved parties.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "422",
      "key": "REQ-D-gRPC-422",
      "fields": {
        "summary": "Forwarding Commands between Ankaios Server and Agent",
        "issuetype": {
          "id": "422",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When receiving FromServer messages from the Ankaios Agent, for all Agents that are recipients of messages, the gRPC Server shall forward all messages to a particular gRPC Client in a single call.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "423",
      "key": "REQ-D-gRPC-423",
      "fields": {
        "summary": "Forwarding Commands between Ankaios Server and Agent",
        "issuetype": {
          "id": "423",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Server uses functionality provided by the Common Library to find all Commands that need to be forwarded to a particular Agent.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "424",
      "key": "REQ-D-gRPC-424",
      "fields": {
        "summary": "Forwarding Commands between Ankaios Server and Agent",
        "issuetype": {
          "id": "424",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When receiving FromServer messages from the gRPC Server, the gRPC Client shall forward these messages to the Ankaios Agent.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "425",
      "key": "REQ-D-gRPC-425",
      "fields": {
        "summary": "Forwarding Commands between Ankaios Server and Agent",
        "issuetype": {
          "id": "425",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When receiving ToServer messages from the Ankaios Agent, the gRPC Client shall forward these messages to the gRPC Agent Connection.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "426",
      "key": "REQ-D-gRPC-426",
      "fields": {
        "summary": "Forwarding Commands between Ankaios Server and Agent",
        "issuetype": {
          "id": "426",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When receiving ToServer messages from the gRPC Client, the gRPC Agent Connection shall forward these messages to the Ankaios Server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "427",
      "key": "REQ-D-gRPC-427",
      "fields": {
        "summary": "Forwarding Commands between Ankaios Server and Agent",
        "issuetype": {
          "id": "427",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When receiving ToServer messages from the gRPC Client, the gRPC Commander Connection shall forward these messages to the Ankaios Server.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "428",
      "key": "REQ-D-gRPC-428",
      "fields": {
        "summary": "Handling connection interruptions",
        "issuetype": {
          "id": "428",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "The gRPC Agent Connection shall send an AgentGone messages to the Ankaios Server if the connection to the gRPC Client gets interrupted.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "429",
      "key": "REQ-D-gRPC-429",
      "fields": {
        "summary": "Handling connection interruptions",
        "issuetype": {
          "id": "429",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "When the gRPC client detects a connection interruption of an Ankaios agent to the Ankaios server, the gRPC client connection shall send a `ServerGone` message to the Ankaios agent.",
        "verifiableByCodeOnly": true
      }
    }
  ]
}